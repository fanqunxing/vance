{"componentChunkName":"component---src-templates-blog-post-js","path":"/01_technology/01_client/web/006_js 上下文总结/","result":{"data":{"site":{"siteMetadata":{"title":"Vance’s Blog"}},"markdownRemark":{"id":"1c0cd78e-113a-5657-8a9c-027cf48692ca","excerpt":"01 context 任何方法，谁调用了它，则就是它的 context。 这个和 this 的描述是一致的： this 最终指向的是调用它的对象 上下文就是 this 的指向。 02 不稳定的 context context 在 js 的表现经常出现一些看似”不稳定”的情况，下面列出了一些”不稳定”。 (1) new…","html":"<h3>01 context</h3>\n<p>任何方法，谁调用了它，则就是它的 context。</p>\n<p>这个和 this 的描述是一致的：</p>\n<blockquote>\n<p>this 最终指向的是调用它的对象</p>\n</blockquote>\n<p><strong>上下文就是 this 的指向。</strong></p>\n<hr>\n<h3>02 不稳定的 context</h3>\n<p>context 在 js 的表现经常出现一些看似”不稳定”的情况，下面列出了一些”不稳定”。</p>\n<h4>(1) new 和非 new</h4>\n<p>下面是一道常见的面试题，问 ① 和 ② 分别输出什么结果？</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ②</span></code></pre></div>\n<p>虽然简单，却是对 context 最全的理解。\n① 输出 say 的实例\n②<strong>输出 window 吗?</strong>\n显然我们凭借这段代码是无法做出对 ② 的判断，因为我们根本不知道 say()的运行环境是什么。</p>\n<hr>\n<h4>(2) 方法赋值</h4>\n<p>下面试题，将方法赋值给一个变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"嗷嗷嗷\"</span>\n<span class=\"token keyword\">var</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"喵\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> say <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">.</span>say\ncat<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ②</span></code></pre></div>\n<p>结果：\n① 输出 喵\n② 输出 嗷嗷嗷</p>\n<p>这里可以理解：因为 say 其实只是引用了一个函数，函数的运行依赖 context，不同的 context 必然有不同结果。</p>\n<hr>\n<h4>(3) Event Loop</h4>\n<p>Event Loop 又叫事件循环，由于 js 没有多线程，处理多个任务的时候，就需要采用异步队列（如定时器、I/O、Promse），或者利用浏览器的多线程启动多个任务（如 ajax）。</p>\n<p>那么异步任务，它的 context 就是浏览器当前打开的窗口了，即 window。</p>\n<p>下面是一个常见的面试问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//②</span></code></pre></div>\n<p>① 和 ② 都输出 window。</p>\n<hr>\n<h4>(4) 自执行函数</h4>\n<p>看下面一个问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//②</span></code></pre></div>\n<p>① 和 ② 都输出 window，这里也说明了自执行函数是被 window 调用。</p>\n<hr>\n<h3>03 闭包拯救世界</h3>\n<p>面对不稳定的 context，闭包可以被动解决这些问题。\n因为我们所期望的 context，和闭包所表现的 scope 惊人相似。</p>\n<p>于是我们纷纷这样做：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//②</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//②</span></code></pre></div>\n<p>上面做法用_this 代替 this，使得正常访问外层 this。</p>\n<hr>\n<h3>04 bind 来优化</h3>\n<p>对于用闭包来改变 context 的问题，不是很优雅。\n用 bind 会更简洁。</p>\n<p>实现是下面代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//②</span></code></pre></div>\n<p>通过 bind 直接改变当前函数的 context，这样子做法是符合我们的阅读习惯的。</p>\n<hr>\n<h3>05 call 和 apply</h3>\n<p>call 和 apply 又叫对象冒充，是在方法执行的时候，传入一个对象，顶替原有的 context。</p>\n<p>下面代码通过 call，主动改变的执行函数的 context。这在封装里面很重要。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">clickdiv</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>click me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">function</span> <span class=\"token function\">clickdiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>点击 div，打印 div 元素。</p>\n<hr>\n<h3>06 箭头函数</h3>\n<p>可能意识到 context 这个问题，于是 es6 推出箭头函数。箭头函数采用词法作用域，这使得它和闭包的解决极为相似。</p>\n<p>注意：arguments 本身在箭头函数下，会指向外层函数的 arguments (同 this 一样)。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//①</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//②</span></code></pre></div>\n<p>这里 ① 和 ② 都正常输出了。</p>\n<hr>\n<h3>07 Arguments</h3>\n<p>Arguments 也是 context 绕不过去的坎，Arguments 是函数的内部对象，js 在执行函数的时候，会根据 Arguments 初始化函数内部的变量。</p>\n<p>arguments.callee 可以访问到当前函数。\narguments.callee.caller 可以访问调用当前函数的函数。</p>\n<p>arguments 上面特性严格模式下是不允许被使用的。</p>","frontmatter":{"title":"js 上下文总结","date":"October 23, 2018","description":"总结所有的 this 指向问题"}},"previous":{"fields":{"slug":"/01_technology/03_tools/git/"},"frontmatter":{"title":"git 常用操作"}},"next":{"fields":{"slug":"/01_technology/02_server/db/sql/"},"frontmatter":{"title":"sql 语句笔记"}}},"pageContext":{"id":"1c0cd78e-113a-5657-8a9c-027cf48692ca","previousPostId":"3c6089f9-99e7-5480-84a2-ac82700d5edb","nextPostId":"1f000a57-a22a-50be-b49a-0a24525c9e19"}},"staticQueryHashes":["2841359383","3257411868"]}
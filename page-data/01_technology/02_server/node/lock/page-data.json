{"componentChunkName":"component---src-templates-blog-post-js","path":"/01_technology/02_server/node/lock/","result":{"data":{"site":{"siteMetadata":{"title":"Vance’s Blog"}},"markdownRemark":{"id":"75bd1994-ba16-510f-9bbf-e4223fa6ae72","excerpt":"​\n1、需要锁的场景\n例如：nodejs 写了一个定时任务，如下： 上述代码，每分钟执行一次 runTask 方法。 如果将上代码部署两个实例服务器上，那么实际效果是两份实例都会执行定时任务。实际上就会变成每分钟执行两次。…","html":"<p>​\n1、需要锁的场景\n例如：nodejs 写了一个定时任务，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> schedule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-schedule\"</span><span class=\"token punctuation\">)</span>\n\nschedule<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 * * * * *\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上述代码，每分钟执行一次 runTask 方法。</p>\n<p>如果将上代码部署两个实例服务器上，那么实际效果是两份实例都会执行定时任务。实际上就会变成每分钟执行两次。</p>\n<p>2、乐观锁\n乐观锁用于做并发的控制。大致的设计思路为：</p>\n<p>① 设计一张乐观锁表如下：</p>\n<p>lockName version\n测试锁 0\n表中只有两个字段：锁的名字和版本号。</p>\n<p>② 并发操作时，多个并发去抢数据库里面的锁，保证有且仅有一个能抢到锁，抢到锁的执行，其他不执行。</p>\n<p>抢锁的规则如下：</p>\n<p>a. 用 lockName 查询出  lockName 和 version</p>\n<p>b. 用 lockName 和 version 为条件去更新 version （更新操作：version 加 1）</p>\n<p>c. 更新成功的即为抢到锁的。</p>\n<p>上面的思路很精妙，一旦有个进程更新成功，其他进程手里的 version 就会失效，那么更新就会失败。</p>\n<p>3、mongodb 的 findOneAndUpdate\n利用 mongodb 中的 findOneAndUpdate 操作，findOneAndUpdate 是查出符合条件的更新，这个是一个原子操作。</p>\n<p>代码大致如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">findOneAndUpdate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">lockName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"测试锁\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>4、node 中代码实现\n我们将 2 中的原理写出来即可。(下面代码仅保留主要功能，未对异常处理)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lockName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> version<span class=\"token punctuation\">,</span> lockName <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> lockName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">findOneAndUpdate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> lockName<span class=\"token punctuation\">,</span> version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> version <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>lastErrorObject<span class=\"token punctuation\">.</span>updatedExisting\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用锁的时候我们下面使用，这样保证了仅仅只有一个进程能拿到锁。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> schedule <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-schedule\"</span><span class=\"token punctuation\">)</span>\n\nschedule<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0 * * * * *\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试锁\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>5、补充注意\n需要注意的是上述的例子，仅具有思路参考性。因为上述思路的并发仅仅是限制了“同时”的情况。</p>\n<p>实际上并发定时任务时间是存在时间差的，如果是有时间差，那么所有的执行都能先后拿到锁。此时是需要加入时间的判断。</p>\n<p>​</p>","frontmatter":{"title":"乐观锁 (nodejs+mongodb) 实现","date":"July 01, 2021","description":"乐观锁 (nodejs+mongodb) 实现"}},"previous":{"fields":{"slug":"/01_technology/02_server/node/call-python/"},"frontmatter":{"title":"nodejs 调用 python"}},"next":{"fields":{"slug":"/01_technology/02_server/node/puppeteer-pdf/"},"frontmatter":{"title":"使用 puppeteer 实现 PDF 文件合成"}}},"pageContext":{"id":"75bd1994-ba16-510f-9bbf-e4223fa6ae72","previousPostId":"5aaf5b72-f056-583f-8eaf-55c2ed886885","nextPostId":"db9990e0-1ca3-5e16-8bbf-ad01860041fb"}},"staticQueryHashes":["2841359383","3257411868"]}